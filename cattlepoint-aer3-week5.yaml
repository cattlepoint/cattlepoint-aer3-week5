---
AWSTemplateFormatVersion: "2010-09-09"
Description: Deploys the ficticious Rio Health System Inc CRM application

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
        - Key: Project
          Value: !Ref AWS::StackName
  VPCIpv6Cidr:
    Type: AWS::EC2::VPCCidrBlock
    Properties:
      VpcId: !Ref VPC
      AmazonProvidedIpv6CidrBlock: true

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
        - Key: Project
          Value: !Ref AWS::StackName

  VpcGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnetA:
    Type: AWS::EC2::Subnet
    DependsOn: VPCIpv6Cidr
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: 10.0.1.0/24
      Ipv6Native: false
      AssignIpv6AddressOnCreation: true
      Ipv6CidrBlock: !Select
        - 0
        - !Cidr
          - !Select [0, !GetAtt VPC.Ipv6CidrBlocks]
          - 2
          - 64
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
        - Key: Project
          Value: !Ref AWS::StackName
        - Key: !Sub "kubernetes.io/cluster/${AWS::StackName}-cluster"
          Value: shared
        - Key: kubernetes.io/role/elb
          Value: "1"

  PublicSubnetB:
    Type: AWS::EC2::Subnet
    DependsOn: VPCIpv6Cidr
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs ""]
      CidrBlock: 10.0.2.0/24
      Ipv6Native: false
      AssignIpv6AddressOnCreation: true
      Ipv6CidrBlock: !Select
        - 1
        - !Cidr
          - !Select [0, !GetAtt VPC.Ipv6CidrBlocks]
          - 2
          - 64
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
        - Key: Project
          Value: !Ref AWS::StackName
        - Key: !Sub "kubernetes.io/cluster/${AWS::StackName}-cluster"
          Value: shared
        - Key: kubernetes.io/role/elb
          Value: "1"

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
        - Key: Project
          Value: !Ref AWS::StackName

  DefaultRoute:
    Type: AWS::EC2::Route
    DependsOn: VpcGatewayAttachment
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationIpv6CidrBlock: ::/0
      GatewayId: !Ref InternetGateway

  DefaultRouteIpv4:
    Type: AWS::EC2::Route
    DependsOn: VpcGatewayAttachment
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  SubnetRouteTableAssociationA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref RouteTable

  SubnetRouteTableAssociationB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref RouteTable

  InstanceSecurityGroupA:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SSH from Starlink IPV6 addresses
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: -1
          CidrIpv6: 2a0d:3340::/29
        - IpProtocol: -1
          CidrIpv6: 2406:2d40::/32
        - IpProtocol: -1
          CidrIpv6: 2c0f:2a80::/32
        - IpProtocol: -1
          CidrIpv6: 2803:9810::/32
        - IpProtocol: -1
          CidrIpv6: 2605:59c0::/28
        - IpProtocol: -1
          CidrIpv6: 2606:ee40::/32
        - IpProtocol: -1
          CidrIpv6: 2620:134:B000::/40
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
        - Key: Project
          Value: !Ref AWS::StackName

  InstanceSecurityGroupB:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SSH from T-Mobile USA IPV6 addresses
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: -1
          CidrIpv6: 2607:FB90::/28
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
        - Key: Project
          Value: !Ref AWS::StackName

  InstanceSecurityGroupC:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SSH from AT&T Wireless IPV6 addresses
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: -1
          CidrIpv6: 2600:300::/24
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
        - Key: Project
          Value: !Ref AWS::StackName

  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    DependsOn: EKSCluster
    Properties:
      LaunchTemplateName: !Sub "${AWS::StackName}-lt"
      LaunchTemplateData:
        InstanceType: t3.nano
        ImageId: "{{resolve:ssm:/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-x86_64}}"
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -xe
            dnf update -y
            dnf install -y python3.12 python3.12-pip python3-virtualenv
            runuser -l ec2-user -c '
              /usr/bin/python3.12 -m pip install --user virtualenvwrapper
              echo "export AWS_USE_DUALSTACK_ENDPOINT=false" >> ~/.bashrc
              echo "export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3.12" >> ~/.bashrc
              echo "source ~/.local/bin/virtualenvwrapper.sh" >> ~/.bashrc
            '
            dnf install docker git -y
            systemctl enable --now docker
            usermod -aG docker ec2-user
            runuser -l ec2-user -c '
              aws ecr get-login-password --region ${AWS::Region} | \
                docker login --username AWS --password-stdin \
                "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com"
              git clone https://github.com/cattlepoint/cattlepoint-aer3-week5.git
              cd ~/cattlepoint-aer3-week5/database
              docker build -t ${AWS::StackName}-database:latest .
              docker tag ${AWS::StackName}-database:latest \
                "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${AWS::StackName}-database:latest"
              docker push "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${AWS::StackName}-database:latest"
              cd ~/cattlepoint-aer3-week5/frontend/
              docker build -t ${AWS::StackName}-frontend:latest .
              docker tag ${AWS::StackName}-frontend:latest \
                "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${AWS::StackName}-frontend:latest"
              docker push "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${AWS::StackName}-frontend:latest"
            '
            curl -L https://github.com/docker/compose/releases/download/v2.26.1/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose
            chmod +x /usr/local/bin/docker-compose
            ARCH=$(uname -m)
            case "$ARCH" in
              x86_64)  ARCH=amd64 ;;
              aarch64) ARCH=arm64 ;;
              *) echo "Unsupported architecture: $ARCH"; exit 1 ;;
            esac
            PLATFORM="$(uname -s)_$ARCH"
            curl -sLO "https://github.com/eksctl-io/eksctl/releases/latest/download/eksctl_$PLATFORM.tar.gz"
            curl -sL  "https://github.com/eksctl-io/eksctl/releases/latest/download/eksctl_checksums.txt" \
              | grep "$PLATFORM" | sha256sum --check
            tar -xzf eksctl_$PLATFORM.tar.gz -C /tmp && rm -f eksctl_$PLATFORM.tar.gz
            sudo install -m 0755 /tmp/eksctl /usr/local/bin && rm -f /tmp/eksctl
            VER=$(curl -Ls https://dl.k8s.io/release/stable.txt | tr -d '\n')   # e.g. v1.33.1
            curl -L -o kubectl         "https://dl.k8s.io/release/$VER/bin/linux/$ARCH/kubectl"
            curl -L -o kubectl.sha256  "https://dl.k8s.io/release/$VER/bin/linux/$ARCH/kubectl.sha256"
            echo "$(cat kubectl.sha256)  kubectl" | sha256sum --check
            install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
            rm -f kubectl kubectl.sha256
            runuser -l ec2-user -c '
              eksctl utils write-kubeconfig --cluster ${AWS::StackName}-cluster --region ${AWS::Region}
            cat << EOF >> ~/suitecrm.yaml
            ---
            apiVersion: v1
            kind: PersistentVolumeClaim
            metadata:
              name: mariadb-pvc
            spec:
              accessModes:
                - ReadWriteOnce
              storageClassName: gp3
              resources:
                requests:
                  storage: 10Gi
            ---
            apiVersion: apps/v1
            kind: Deployment
            metadata:
              name: mariadb
            spec:
              replicas: 1
              selector:
                matchLabels:
                  app: mariadb
              template:
                metadata:
                  labels:
                    app: mariadb
                spec:
                  containers:
                    - name: mariadb
                      image: ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${AWS::StackName}-database:latest
                      ports:
                        - containerPort: 3306
                      env:
                        - name: MYSQL_ROOT_PASSWORD
                          value: rootpassword
                        - name: MYSQL_DATABASE
                          value: appdb
                        - name: MYSQL_USER
                          value: appuser
                        - name: MYSQL_PASSWORD
                          value: apppassword
                      volumeMounts:
                        - name: data
                          mountPath: /var/lib/mysql
                  volumes:
                    - name: data
                      persistentVolumeClaim:
                        claimName: mariadb-pvc
            ---
            apiVersion: v1
            kind: Service
            metadata:
              name: mariadb
            spec:
              selector:
                app: mariadb
              ports:
                - port: 3306
                  targetPort: 3306
            ---
            apiVersion: apps/v1
            kind: Deployment
            metadata:
              name: suitecrm
            spec:
              replicas: 2
              selector:
                matchLabels:
                  app: suitecrm
              template:
                metadata:
                  labels:
                    app: suitecrm
                spec:
                  containers:
                    - name: suitecrm
                      image: ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${AWS::StackName}-frontend:latest
                      ports:
                        - containerPort: 80
                      env:
                        - name: SUITECRM_DATABASE_HOST
                          value: mariadb
                        - name: SUITECRM_DATABASE_PORT_NUMBER
                          value: "3306"
                        - name: SUITECRM_DATABASE_NAME
                          value: appdb
                        - name: SUITECRM_DATABASE_USER
                          value: appuser
                        - name: SUITECRM_DATABASE_PASSWORD
                          value: apppassword
            ---
            apiVersion: v1
            kind: Service
            metadata:
              name: suitecrm
              annotations:
                service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
                service.beta.kubernetes.io/aws-load-balancer-scheme: "internet-facing"
            spec:
              type: LoadBalancer
              selector:
                app: suitecrm
              ports:
                - port: 80
                  targetPort: 80
            EOF
            kubectl apply -f ~/suitecrm.yaml
            '
        InstanceMarketOptions:
          MarketType: spot
          SpotOptions:
            InstanceInterruptionBehavior: terminate
        SecurityGroupIds:
          - !Ref InstanceSecurityGroupA
          - !Ref InstanceSecurityGroupB
          - !Ref InstanceSecurityGroupC
        BlockDeviceMappings:
          - DeviceName: /dev/xvda
            Ebs:
              VolumeSize: 20
              VolumeType: gp3
              DeleteOnTermination: true
        IamInstanceProfile:
          Arn: !GetAtt InstanceProfile.Arn
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: !Ref AWS::StackName
              - Key: Project
                Value: !Ref AWS::StackName
      TagSpecifications:
        - ResourceType: launch-template
          Tags:
            - Key: Name
              Value: !Ref AWS::StackName
            - Key: Project
              Value: !Ref AWS::StackName

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !Ref PublicSubnetA
        - !Ref PublicSubnetB
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MinSize: 1
      MaxSize: 1
      DesiredCapacity: 1
      HealthCheckType: EBS
      HealthCheckGracePeriod: 60
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
          PropagateAtLaunch: true
        - Key: Project
          Value: !Ref AWS::StackName
          PropagateAtLaunch: true

  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/EC2InstanceConnect
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/ReadOnlyAccess
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
      Policies:
        - PolicyName: ECRFullAccessForRhsiCrm
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: ecr:GetAuthorizationToken
                Resource: "*"
              - Effect: Allow
                Action: "ecr:*"
                Resource:
                  - !GetAtt RhsiCrmDatabaseRepository.Arn
                  - !Sub "${RhsiCrmDatabaseRepository.Arn}/*"
                  - !GetAtt RhsiCrmFrontendRepository.Arn
                  - !Sub "${RhsiCrmFrontendRepository.Arn}/*"
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
        - Key: Project
          Value: !Ref AWS::StackName

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref InstanceRole

  RhsiCrmDatabaseRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub "${AWS::StackName}-database"
      ImageScanningConfiguration:
        ScanOnPush: true
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-database"
        - Key: Project
          Value: !Ref AWS::StackName

  RhsiCrmFrontendRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub "${AWS::StackName}-frontend"
      ImageScanningConfiguration:
        ScanOnPush: true
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-frontend"
        - Key: Project
          Value: !Ref AWS::StackName

  ClusterRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: eks.amazonaws.com
            Action:
              - sts:AssumeRole
              - sts:TagSession
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
        - arn:aws:iam::aws:policy/AmazonEKSServicePolicy
        - arn:aws:iam::aws:policy/AmazonEKSComputePolicy
        - arn:aws:iam::aws:policy/AmazonEKSBlockStoragePolicy
        - arn:aws:iam::aws:policy/AmazonEKSLoadBalancingPolicy
        - arn:aws:iam::aws:policy/AmazonEKSNetworkingPolicy

  NodeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodeMinimalPolicy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryPullOnly
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/AmazonEBSCSIDriverPolicy

  EKSCluster:
    Type: AWS::EKS::Cluster
    Properties:
      Name: !Sub "${AWS::StackName}-cluster"
      Version: 1.33
      RoleArn: !GetAtt ClusterRole.Arn
      ComputeConfig:
        Enabled: true
        NodeRoleArn: !GetAtt NodeRole.Arn
        NodePools:
          - general-purpose
          - system
      KubernetesNetworkConfig:
        ElasticLoadBalancing:
          Enabled: true
      StorageConfig:
        BlockStorage:
          Enabled: true
      AccessConfig:
        AuthenticationMode: API_AND_CONFIG_MAP
      ResourcesVpcConfig:
        SubnetIds:
          - !Ref PublicSubnetA
          - !Ref PublicSubnetB
        EndpointPublicAccess: true
        EndpointPrivateAccess: false

  PodIdentityAgentAddon:
    Type: AWS::EKS::Addon
    Properties:
      AddonName: eks-pod-identity-agent
      ClusterName: !Ref EKSCluster
      ResolveConflicts: PRESERVE

  EbsCsiDriverAddon:
    Type: AWS::EKS::Addon
    Properties:
      AddonName: aws-ebs-csi-driver
      ClusterName: !Ref EKSCluster
      ResolveConflicts: PRESERVE

  InstanceAccessEntry:
    Type: AWS::EKS::AccessEntry
    Properties:
      ClusterName: !Ref EKSCluster
      PrincipalArn: !GetAtt InstanceRole.Arn
      Type: STANDARD
      AccessPolicies:
        - PolicyArn: arn:aws:eks::aws:cluster-access-policy/AmazonEKSClusterAdminPolicy
          AccessScope: { Type: cluster }
