---
AWSTemplateFormatVersion: "2010-09-09"
Description: Deploys the ficticious Rio Health System Inc CRM application

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
        - Key: Project
          Value: !Ref AWS::StackName
  VPCIpv6Cidr:
    Type: AWS::EC2::VPCCidrBlock
    Properties:
      VpcId: !Ref VPC
      AmazonProvidedIpv6CidrBlock: true

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
        - Key: Project
          Value: !Ref AWS::StackName

  VpcGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnetA:
    Type: AWS::EC2::Subnet
    DependsOn: VPCIpv6Cidr
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: 10.0.1.0/24
      Ipv6Native: false
      AssignIpv6AddressOnCreation: true
      Ipv6CidrBlock: !Select
        - 0
        - !Cidr
          - !Select [0, !GetAtt VPC.Ipv6CidrBlocks]
          - 2
          - 64
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
        - Key: Project
          Value: !Ref AWS::StackName

  PublicSubnetB:
    Type: AWS::EC2::Subnet
    DependsOn: VPCIpv6Cidr
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs ""]
      CidrBlock: 10.0.2.0/24
      Ipv6Native: false
      AssignIpv6AddressOnCreation: true
      Ipv6CidrBlock: !Select
        - 1
        - !Cidr
          - !Select [0, !GetAtt VPC.Ipv6CidrBlocks]
          - 2
          - 64
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
        - Key: Project
          Value: !Ref AWS::StackName

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
        - Key: Project
          Value: !Ref AWS::StackName

  DefaultRoute:
    Type: AWS::EC2::Route
    DependsOn: VpcGatewayAttachment
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationIpv6CidrBlock: ::/0
      GatewayId: !Ref InternetGateway

  DefaultRouteIpv4:
    Type: AWS::EC2::Route
    DependsOn: VpcGatewayAttachment
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  SubnetRouteTableAssociationA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref RouteTable

  SubnetRouteTableAssociationB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref RouteTable

  InstanceSecurityGroupA:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SSH from Starlink IPV6 addresses
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIpv6: 2a0d:3340::/29
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIpv6: 2406:2d40::/32
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIpv6: 2c0f:2a80::/32
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIpv6: 2803:9810::/32
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIpv6: 2605:59c0::/28
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIpv6: 2606:ee40::/32
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIpv6: 2620:134:B000::/40
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
        - Key: Project
          Value: !Ref AWS::StackName

  InstanceSecurityGroupB:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SSH from T-Mobile USA IPV6 addresses
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIpv6: 2607:FB90::/28
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
        - Key: Project
          Value: !Ref AWS::StackName

  InstanceSecurityGroupC:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SSH from AT&T Wireless IPV6 addresses
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIpv6: 2600:300::/24
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
        - Key: Project
          Value: !Ref AWS::StackName

  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub "${AWS::StackName}-lt"
      LaunchTemplateData:
        InstanceType: t4g.nano
        ImageId: "{{resolve:ssm:/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-arm64}}"
        UserData:
          Fn::Base64: |
            #!/bin/bash -xe
            dnf update -y
            dnf install -y python3.12 python3.12-pip python3-virtualenv
            runuser -l ec2-user -c '
              /usr/bin/python3.12 -m pip install --user virtualenvwrapper
              echo "export AWS_USE_DUALSTACK_ENDPOINT=false" >> ~/.bashrc
              echo "export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3.12" >> ~/.bashrc
              echo "source ~/.local/bin/virtualenvwrapper.sh" >> ~/.bashrc
            '
            dnf install docker git -y
            systemctl enable --now docker
            usermod -aG docker ec2-user
            runser -l ec2-user -c '
              TOKEN=$(curl -s -X PUT "http://169.254.169.254/latest/api/token" \
                -H "X-aws-ec2-metadata-token-ttl-seconds: 300")
              REGION=$(curl -s -H "X-aws-ec2-metadata-token: $TOKEN" \
                http://169.254.169.254/latest/meta-data/placement/region)
              ACCOUNT_ID=$(curl -s -H "X-aws-ec2-metadata-token: $TOKEN" \
                http://169.254.169.254/latest/dynamic/instance-identity/document |
                grep -oP '(?<="accountId" : ")[0-9]+')
              aws ecr get-login-password --region "$REGION" | \
                docker login --username AWS --password-stdin \
                "${ACCOUNT_ID}.dkr.ecr.${REGION}.amazonaws.com"
              git clone https://github.com/cattlepoint/cattlepoint-aer3-week5.git
              cd cattlepoint-aer3-week5/database
              docker build -t rhsi-crm-database:latest .
              docker tag rhsi-crm-database:latest \
                "${ACCOUNT_ID}.dkr.ecr.${REGION}.amazonaws.com/rhsi-crm-database:latest"
              docker push "${ACCOUNT_ID}.dkr.ecr.${REGION}.amazonaws.com/rhsi-crm-database:latest"
            '
            curl -L https://github.com/docker/compose/releases/download/v2.26.1/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose
            chmod +x /usr/local/bin/docker-compose
        InstanceMarketOptions:
          MarketType: spot
          SpotOptions:
            InstanceInterruptionBehavior: terminate
        SecurityGroupIds:
          - !Ref InstanceSecurityGroupA
          - !Ref InstanceSecurityGroupB
          - !Ref InstanceSecurityGroupC
        BlockDeviceMappings:
          - DeviceName: /dev/xvda
            Ebs:
              VolumeSize: 10
              VolumeType: gp3
              DeleteOnTermination: true
        IamInstanceProfile:
          Arn: !GetAtt InstanceProfile.Arn
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: !Ref AWS::StackName
              - Key: Project
                Value: !Ref AWS::StackName
      TagSpecifications:
        - ResourceType: launch-template
          Tags:
            - Key: Name
              Value: !Ref AWS::StackName
            - Key: Project
              Value: !Ref AWS::StackName

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !Ref PublicSubnetA
        - !Ref PublicSubnetB
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MinSize: 1
      MaxSize: 1
      DesiredCapacity: 1
      HealthCheckType: EBS
      HealthCheckGracePeriod: 60
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
          PropagateAtLaunch: true
        - Key: Project
          Value: !Ref AWS::StackName
          PropagateAtLaunch: true

  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/EC2InstanceConnect
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/ReadOnlyAccess
      Policies:
        - PolicyName: ECRFullAccessForRhsiCrm
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: ecr:GetAuthorizationToken
                Resource: "*"
              - Effect: Allow
                Action: "ecr:*"
                Resource:
                  - !GetAtt RhsiCrmDatabaseRepository.Arn
                  - !Sub "${RhsiCrmDatabaseRepository.Arn}/*"
                  - !GetAtt RhsiCrmFrontendRepository.Arn
                  - !Sub "${RhsiCrmFrontendRepository.Arn}/*"
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
        - Key: Project
          Value: !Ref AWS::StackName

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref InstanceRole

  RhsiCrmDatabaseRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub "${AWS::StackName}-database"
      ImageScanningConfiguration:
        ScanOnPush: true
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-database"
        - Key: Project
          Value: !Ref AWS::StackName

  RhsiCrmFrontendRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub "${AWS::StackName}-frontend"
      ImageScanningConfiguration:
        ScanOnPush: true
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-frontend"
        - Key: Project
          Value: !Ref AWS::StackName
